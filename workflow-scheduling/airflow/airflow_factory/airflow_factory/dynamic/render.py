"""
Render the config into the read to run dag
"""
import jinja2
from airflow_factory.dynamic.utils import get_current_time
from pathlib import Path
import itertools


DAG_TEMPLATE = jinja2.Template(
	"""
# -*- coding: utf-8 -*-
'''
Generated by Airtrust! Do not edit!

	▄▀█ █ █▀█ ▀█▀ █▀█ █░█ █▀ ▀█▀
	█▀█ █ █▀▄ ░█░ █▀▄ █▄█ ▄█ ░█░

Timestamp: {{current_time}}

If your have problem with config , make sure you read my doc.
Please contact me to be supported: 
Email: tuan.nguyen3@trustingsocial.com

'''
from airflow import DAG
import os
import dagfactory
absolute_path = os.path.abspath("{{ dag_path }}")

dag_factory = dagfactory.DagFactory(absolute_path)
dag_factory.clean_dags(globals())
dag_factory.generate_dags(globals())
"""
)
DAG_NOTEBOOK_TEMPLATE = jinja2.Template(
	"""
# -*- coding: utf-8 -*-
'''
Generated by Airtrust! Do not edit!

	▄▀█ █ █▀█ ▀█▀ █▀█ █░█ █▀ ▀█▀
	█▀█ █ █▀▄ ░█░ █▀▄ █▄█ ▄█ ░█░

Timestamp: {{current_time}}

If your have problem with config , make sure you read my doc.
Please contact me to be supported: 
Email: tuan.nguyen3@trustingsocial.com

'''
import datetime
import logging
from datetime import timedelta
from airflow import DAG
from airflow_dag_factory.dag_builder.common.return_module import ReturnModule
from airflow_dag_factory.dag_builder.tasks.time.time_sensor_task_factory import TimeSensorTaskFactory
from de_application.dag_template.dag_template import DAGTemplateDSWithCombine
from airflow_dag_factory.dag_builder.common import get_configs_list
# update below variables
config_dir = "{{config_dir}}"
dag_name = "{{dag_name}}"
schedule_interval = "0 0 * * SUN"
start_date = datetime.datetime(2023, 2, 26)
end_date = datetime.datetime(2029, 10, 24)
tags = ["csv1", "weekly"]
owner = "airflow"
depends_on_past = True
email = ['airflow@example.com']
retries = 1
retry_delay = timedelta(minutes=10)
# update below variables /
default_args = {
	'owner': owner,
	'depends_on_past': depends_on_past,
	'email': email,
	'email_on_failure': False,
	'email_on_retry': False,
	'retries': retries,
	'retry_delay': retry_delay
}
command_files = ["{}/commands.json".format(config_dir)]
command_templates = get_configs_list(command_files)
json_file_combine = {{json_file_combine}}
dag = DAG(dag_name,
		  default_args=default_args,
		  schedule_interval=schedule_interval,
		  catchup=True,
		  max_active_runs=1,
		  user_defined_macros={
			  "os": ReturnModule("os"),
			  "command_templates": command_templates
		  },
		  tags=tags,
		  start_date=start_date,
		  end_date=end_date)
DAGTemplateDSWithCombine(dag=dag, task_id=dag.dag_id,json_file=json_file_combine).build()
logging.info("Processing: config_file".format(config_file=config_dir))
"""
)
def dump_to_python(dag_path: str) -> None:
	"""
	Dump dag config to python file
	:param dag_config:
	:param dag_path:
	:return:
	"""
	current_time = get_current_time()
	return DAG_TEMPLATE.render(dag_path=dag_path, current_time=current_time)



def dump_notebook_to_python(config_dir:str, dag_name:str) -> None:
	"""
	Dump notebook to python file
	:param notebook_path:
	:return:
	"""
	json_files = itertools.chain(Path(config_dir).glob("*.json"))
	current_time = get_current_time()
	json_file_combine = [str(f.absolute()) for f in json_files]
	return DAG_NOTEBOOK_TEMPLATE.render(
		config_dir=config_dir, 
		current_time=current_time,
		dag_name=dag_name,
		json_file_combine=json_file_combine
	)


# json render
